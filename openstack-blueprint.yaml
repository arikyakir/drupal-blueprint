tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://www.getcloudify.org/spec/cloudify/4.2/types.yaml
  - http://www.getcloudify.org/spec/utilities-plugin/1.4.4/plugin.yaml
  - http://www.getcloudify.org/spec/diamond-plugin/1.3.5/plugin.yaml
  - http://www.getcloudify.org/spec/openstack-plugin/2.5.2/plugin.yaml
  - http://www.getcloudify.org/spec/dblb/0.2/plugin.yaml
  - imports/scale.yaml
  - imports/db-lb.yaml

inputs:

  environment_blueprint_filename:
    default: aws-blueprint.yaml

  keystone_username:
    default: { get_secret: keystone_username }

  keystone_password:
    default: { get_secret: keystone_password }

  keystone_tenant_name:
    default: { get_secret: keystone_tenant_name }

  keystone_url:
    default: { get_secret: keystone_url }

  region:
    default: { get_secret: region }

  external_network_name:
    default: { get_secret: external_network_name }

  router_name:
    default: { get_secret: router_name }

  public_network_name:
    default: { get_secret: public_network_name }

  private_network_name:
    default: { get_secret: public_network_name }

  public_subnet_name:
    default: { get_secret: public_subnet_name }

  private_subnet_name:
    default: { get_secret: public_subnet_name }

  agent_key_private:
    description: >
      The content of the agent's private key.
    default: { get_secret: agent_key_private }

  agent_key_public:
    description: >
      The content of the agent's public key.
    default: { get_secret: agent_key_public }

  image:
    description: >
      An Openstack Image ID. Tested with a Ubuntu 14.04 image.
    default: { get_secret: ubuntu_trusty_image }

  flavor:
    description: >
      An Openstack Flavor ID.
    default: { get_secret: small_image_flavor }

  agent_user:
    description: The user name of the agent on the instance created from the image.
    default: ubuntu

  manager_network:
    default: default

dsl_definitions:

  openstack_config: &openstack_config
    username: { get_input: keystone_username }
    password: { get_input: keystone_password }
    tenant_name: { get_input: keystone_tenant_name }
    auth_url: { get_input: keystone_url }
    region: { get_input: region }

node_templates:

  drupal:
    type: cloudify.nodes.Root
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: scripts/install-drupal.sh
        configure:
          implementation: scripts/create-db.py
          inputs: &database_connection
            db_host: { get_attribute: [ mysqldb_endpoint, deployment, outputs, ip ] }
            db_user_name: { get_input: new_database_user }
            db_password: { get_input: new_database_password }
            db_name: { get_input: db_name }
        delete:
          implementation: scripts/delete-db.py
          inputs: *database_connection
    relationships:
    - type: cloudify.relationships.contained_in
      target: apache_vm
    - type: cloudify.relationships.depends_on
      target: mysqldb_endpoint

  apache_vm:
    type: cloudify.openstack.nodes.Server
    properties:
      openstack_config: *openstack_config
      agent_config:
        network: { get_input: manager_network }
        install_method: init_script
        user: { get_input: agent_user }
        port: 22
        key: { get_input: agent_key_private }
      server:
        key_name: ''
        image: { get_input: image }
        flavor: { get_input: flavor }
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: openstack.nova_plugin.server.create
          inputs:
            args:
              image: { get_input: image }
              flavor: { get_input: flavor }
              userdata: { get_attribute: [ cloudify_host_cloud_config, cloud_config ] }
    relationships:
    - type: cloudify.openstack.server_connected_to_port
      target: apache_vm_port
    - type: cloudify.relationships.contained_in
      target: public_network

  drupal_security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: *openstack_config
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          port: 8080
        - remote_ip_prefix: 0.0.0.0/0
          port: 8000
        - remote_ip_prefix: 0.0.0.0/0
          port: 8081
        - remote_ip_prefix: 0.0.0.0/0
          port: 22
        - remote_ip_prefix: 0.0.0.0/0
          port: 80
        - remote_ip_prefix: 0.0.0.0/0
          port: 3306
        - remote_ip_prefix: 0.0.0.0/0
          port: 55672
        - remote_ip_prefix: 0.0.0.0/0
          port: 5672
        - remote_ip_prefix: 0.0.0.0/0
          port: 53229
        - remote_ip_prefix: 0.0.0.0/0
          port: 8101
        - remote_ip_prefix: 0.0.0.0/0
          port: 8100
    relationships:
    - type: cloudify.relationships.contained_in
      target: OPENSTACK

  apache_ip:
    type: cloudify.openstack.nodes.FloatingIP
    capabilities:
      scalable:
        properties:
          default_instances: 1
    properties:
      openstack_config: *openstack_config
      floatingip:
        floating_network_name: { get_property: [ external_network, resource_id ] }
    relationships:
    - type: cloudify.relationships.contained_in
      target: public_network
  
  apache_vm_port:
    type: cloudify.openstack.nodes.Port
    properties:
      openstack_config: *openstack_config
    relationships:
    - type: cloudify.relationships.contained_in
      target: public_network
    - type: cloudify.relationships.depends_on
      target: public_subnet
    - type: cloudify.openstack.port_connected_to_security_group
      target: drupal_security_group
    - type: cloudify.openstack.port_connected_to_floating_ip
      target: apache_ip

  private_subnet:
    type: cloudify.openstack.nodes.Subnet
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_input: private_subnet_name }
    relationships:
    - target: private_network
      type: cloudify.relationships.contained_in

  private_network:
    type: cloudify.openstack.nodes.Network
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_input: private_network_name }
    relationships:
    - type: cloudify.relationships.contained_in
      target: OPENSTACK

  public_subnet:
    type: cloudify.openstack.nodes.Subnet
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_input: public_subnet_name }
    relationships:
    - target: public_network
      type: cloudify.relationships.contained_in
    - target: router
      type: cloudify.openstack.subnet_connected_to_router

  public_network:
    type: cloudify.openstack.nodes.Network
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_input: public_network_name }
    relationships:
    - type: cloudify.relationships.contained_in
      target: OPENSTACK

  router:
    type: cloudify.openstack.nodes.Router
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_input: router_name }
    relationships:
    - target: external_network
      type: cloudify.relationships.connected_to
    - type: cloudify.relationships.contained_in
      target: OPENSTACK

  external_network:
    type: cloudify.openstack.nodes.Network
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_input: external_network_name }
    relationships:
    - type: cloudify.relationships.depends_on
      target: cloudify_host_cloud_config
    - type: cloudify.relationships.contained_in
      target: OPENSTACK

  cloudify_host_cloud_config:
    type: cloudify.nodes.CloudInit.CloudConfig
    properties:
      resource_config:
        manage_etc_hosts: True
        users:
          - name: { get_input: agent_user }
            shell: /bin/bash
            sudo: ['ALL=(ALL) NOPASSWD:ALL']
            ssh-authorized-keys:
              - { get_input: agent_key_public }
    relationships:
    - type: cloudify.relationships.contained_in
      target: OPENSTACK

  OPENSTACK:
    type: cloudify.nodes.Tier

outputs:

  endpoint:
    description: My application endpoint
    value:
      drupal_url: { concat: ['http://', { get_attribute: [apache_ip, floating_ip_address] },':80' ] }

groups:

  scale_up_group:
    members: [apache_vm]
    policies:
      auto_scale_up:
        type: scale_policy_type
        properties:
          default_instances: 1
          policy_operates_on_group: true
          scale_limit: 5
          scale_direction: '<'
          scale_threshold: 40
          service_selector: .*apache_vm.*.cpu.total.user
          cooldown_time: 60
        triggers:
          execute_scale_workflow:
            type: cloudify.policies.triggers.execute_workflow
            parameters:
              workflow: scale
              workflow_parameters:
                delta: 1
                scalable_entity_name: apache

  scale_down_group:
    members: [apache_vm]
    policies:
      auto_scale_down:
        type: scale_policy_type
        properties:
          default_instances: 1
          scale_limit: 2
          scale_direction: '>'
          scale_threshold: 20
          service_selector: .*apache_vm.*.cpu.total.user
          cooldown_time: 60
        triggers:
          execute_scale_workflow:
            type: cloudify.policies.triggers.execute_workflow
            parameters:
              workflow: scale
              workflow_parameters:
                delta: -1
                scalable_entity_name: apache

  apache:
    members: [drupal, apache_vm, apache_vm_port, apache_ip]

policies:
  scale_policy1:
    type: cloudify.policies.scaling
    properties:
      default_instances: 1
      max_instances: 1
    targets: [apache]
